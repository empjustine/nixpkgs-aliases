{
  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixos-23.05";
  inputs.flake-utils.url = "github:numtide/flake-utils";

  outputs = {
    self,
    nixpkgs,
    flake-utils,
  }:
    flake-utils.lib.eachDefaultSystem (system: let
      pkgs = nixpkgs.legacyPackages.${system};
    in {
      apps.alejandra = { type = "app"; program = "${pkgs.alejandra}/bin/alejandra"; };
      packages.alejandra = pkgs.alejandra;
      apps.aria2c = { type = "app"; program = "${pkgs.aria}/bin/aria2c"; };
      packages.aria2c = pkgs.aria;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.aria = pkgs.aria;
      apps.AtomicParsley = { type = "app"; program = "${pkgs.atomicparsley}/bin/AtomicParsley"; };
      packages.AtomicParsley = pkgs.atomicparsley;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.atomicparsley = pkgs.atomicparsley;
      apps.attr = { type = "app"; program = "${pkgs.attr}/bin/attr"; };
      packages.attr = pkgs.attr;
      apps.getfattr = { type = "app"; program = "${pkgs.attr}/bin/getfattr"; };
      packages.getfattr = pkgs.attr;
      apps.setfattr = { type = "app"; program = "${pkgs.attr}/bin/setfattr"; };
      packages.setfattr = pkgs.attr;
      apps.atuin = { type = "app"; program = "${pkgs.atuin}/bin/atuin"; };
      packages.atuin = pkgs.atuin;
      apps.bashate = { type = "app"; program = "${pkgs.bashate}/bin/bashate"; };
      packages.bashate = pkgs.bashate;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.bash-preexec = pkgs.bash-preexec;
      apps.argdist = { type = "app"; program = "${pkgs.bcc}/bin/argdist"; };
      packages.argdist = pkgs.bcc;
      apps.bashreadline = { type = "app"; program = "${pkgs.bcc}/bin/bashreadline"; };
      packages.bashreadline = pkgs.bcc;
      apps.bcc-lua = { type = "app"; program = "${pkgs.bcc}/bin/bcc-lua"; };
      packages.bcc-lua = pkgs.bcc;
      apps.bindsnoop = { type = "app"; program = "${pkgs.bcc}/bin/bindsnoop"; };
      packages.bindsnoop = pkgs.bcc;
      apps.biolatency = { type = "app"; program = "${pkgs.bcc}/bin/biolatency"; };
      packages.biolatency = pkgs.bcc;
      apps.biolatpcts = { type = "app"; program = "${pkgs.bcc}/bin/biolatpcts"; };
      packages.biolatpcts = pkgs.bcc;
      apps.biopattern = { type = "app"; program = "${pkgs.bcc}/bin/biopattern"; };
      packages.biopattern = pkgs.bcc;
      apps.biosnoop = { type = "app"; program = "${pkgs.bcc}/bin/biosnoop"; };
      packages.biosnoop = pkgs.bcc;
      apps.biotop = { type = "app"; program = "${pkgs.bcc}/bin/biotop"; };
      packages.biotop = pkgs.bcc;
      apps.bitesize = { type = "app"; program = "${pkgs.bcc}/bin/bitesize"; };
      packages.bitesize = pkgs.bcc;
      apps.bpflist = { type = "app"; program = "${pkgs.bcc}/bin/bpflist"; };
      packages.bpflist = pkgs.bcc;
      apps.btrfsdist = { type = "app"; program = "${pkgs.bcc}/bin/btrfsdist"; };
      packages.btrfsdist = pkgs.bcc;
      apps.btrfsslower = { type = "app"; program = "${pkgs.bcc}/bin/btrfsslower"; };
      packages.btrfsslower = pkgs.bcc;
      apps.cachestat = { type = "app"; program = "${pkgs.bcc}/bin/cachestat"; };
      packages.cachestat = pkgs.bcc;
      apps.cachetop = { type = "app"; program = "${pkgs.bcc}/bin/cachetop"; };
      packages.cachetop = pkgs.bcc;
      apps.capable = { type = "app"; program = "${pkgs.bcc}/bin/capable"; };
      packages.capable = pkgs.bcc;
      apps.cobjnew = { type = "app"; program = "${pkgs.bcc}/bin/cobjnew"; };
      packages.cobjnew = pkgs.bcc;
      apps.compactsnoop = { type = "app"; program = "${pkgs.bcc}/bin/compactsnoop"; };
      packages.compactsnoop = pkgs.bcc;
      apps.cpudist = { type = "app"; program = "${pkgs.bcc}/bin/cpudist"; };
      packages.cpudist = pkgs.bcc;
      apps.cpuunclaimed = { type = "app"; program = "${pkgs.bcc}/bin/cpuunclaimed"; };
      packages.cpuunclaimed = pkgs.bcc;
      apps.criticalstat = { type = "app"; program = "${pkgs.bcc}/bin/criticalstat"; };
      packages.criticalstat = pkgs.bcc;
      apps.dbslower = { type = "app"; program = "${pkgs.bcc}/bin/dbslower"; };
      packages.dbslower = pkgs.bcc;
      apps.dbstat = { type = "app"; program = "${pkgs.bcc}/bin/dbstat"; };
      packages.dbstat = pkgs.bcc;
      apps.dcsnoop = { type = "app"; program = "${pkgs.bcc}/bin/dcsnoop"; };
      packages.dcsnoop = pkgs.bcc;
      apps.dcstat = { type = "app"; program = "${pkgs.bcc}/bin/dcstat"; };
      packages.dcstat = pkgs.bcc;
      apps.deadlock = { type = "app"; program = "${pkgs.bcc}/bin/deadlock"; };
      packages.deadlock = pkgs.bcc;
      apps.dirtop = { type = "app"; program = "${pkgs.bcc}/bin/dirtop"; };
      packages.dirtop = pkgs.bcc;
      apps.drsnoop = { type = "app"; program = "${pkgs.bcc}/bin/drsnoop"; };
      packages.drsnoop = pkgs.bcc;
      apps.execsnoop = { type = "app"; program = "${pkgs.bcc}/bin/execsnoop"; };
      packages.execsnoop = pkgs.bcc;
      apps.exitsnoop = { type = "app"; program = "${pkgs.bcc}/bin/exitsnoop"; };
      packages.exitsnoop = pkgs.bcc;
      apps.ext4dist = { type = "app"; program = "${pkgs.bcc}/bin/ext4dist"; };
      packages.ext4dist = pkgs.bcc;
      apps.ext4slower = { type = "app"; program = "${pkgs.bcc}/bin/ext4slower"; };
      packages.ext4slower = pkgs.bcc;
      apps.filegone = { type = "app"; program = "${pkgs.bcc}/bin/filegone"; };
      packages.filegone = pkgs.bcc;
      apps.filelife = { type = "app"; program = "${pkgs.bcc}/bin/filelife"; };
      packages.filelife = pkgs.bcc;
      apps.fileslower = { type = "app"; program = "${pkgs.bcc}/bin/fileslower"; };
      packages.fileslower = pkgs.bcc;
      apps.filetop = { type = "app"; program = "${pkgs.bcc}/bin/filetop"; };
      packages.filetop = pkgs.bcc;
      apps.funccount = { type = "app"; program = "${pkgs.bcc}/bin/funccount"; };
      packages.funccount = pkgs.bcc;
      apps.funcinterval = { type = "app"; program = "${pkgs.bcc}/bin/funcinterval"; };
      packages.funcinterval = pkgs.bcc;
      apps.funclatency = { type = "app"; program = "${pkgs.bcc}/bin/funclatency"; };
      packages.funclatency = pkgs.bcc;
      apps.funcslower = { type = "app"; program = "${pkgs.bcc}/bin/funcslower"; };
      packages.funcslower = pkgs.bcc;
      apps.gethostlatency = { type = "app"; program = "${pkgs.bcc}/bin/gethostlatency"; };
      packages.gethostlatency = pkgs.bcc;
      apps.hardirqs = { type = "app"; program = "${pkgs.bcc}/bin/hardirqs"; };
      packages.hardirqs = pkgs.bcc;
      apps.inject = { type = "app"; program = "${pkgs.bcc}/bin/inject"; };
      packages.inject = pkgs.bcc;
      apps.javacalls = { type = "app"; program = "${pkgs.bcc}/bin/javacalls"; };
      packages.javacalls = pkgs.bcc;
      apps.javaflow = { type = "app"; program = "${pkgs.bcc}/bin/javaflow"; };
      packages.javaflow = pkgs.bcc;
      apps.javagc = { type = "app"; program = "${pkgs.bcc}/bin/javagc"; };
      packages.javagc = pkgs.bcc;
      apps.javaobjnew = { type = "app"; program = "${pkgs.bcc}/bin/javaobjnew"; };
      packages.javaobjnew = pkgs.bcc;
      apps.javastat = { type = "app"; program = "${pkgs.bcc}/bin/javastat"; };
      packages.javastat = pkgs.bcc;
      apps.javathreads = { type = "app"; program = "${pkgs.bcc}/bin/javathreads"; };
      packages.javathreads = pkgs.bcc;
      apps.killsnoop = { type = "app"; program = "${pkgs.bcc}/bin/killsnoop"; };
      packages.killsnoop = pkgs.bcc;
      apps.klockstat = { type = "app"; program = "${pkgs.bcc}/bin/klockstat"; };
      packages.klockstat = pkgs.bcc;
      apps.kvmexit = { type = "app"; program = "${pkgs.bcc}/bin/kvmexit"; };
      packages.kvmexit = pkgs.bcc;
      apps.llcstat = { type = "app"; program = "${pkgs.bcc}/bin/llcstat"; };
      packages.llcstat = pkgs.bcc;
      apps.mdflush = { type = "app"; program = "${pkgs.bcc}/bin/mdflush"; };
      packages.mdflush = pkgs.bcc;
      apps.memleak = { type = "app"; program = "${pkgs.bcc}/bin/memleak"; };
      packages.memleak = pkgs.bcc;
      apps.mountsnoop = { type = "app"; program = "${pkgs.bcc}/bin/mountsnoop"; };
      packages.mountsnoop = pkgs.bcc;
      apps.mysqld_qslower = { type = "app"; program = "${pkgs.bcc}/bin/mysqld_qslower"; };
      packages.mysqld_qslower = pkgs.bcc;
      apps.netqtop = { type = "app"; program = "${pkgs.bcc}/bin/netqtop"; };
      packages.netqtop = pkgs.bcc;
      apps.nfsdist = { type = "app"; program = "${pkgs.bcc}/bin/nfsdist"; };
      packages.nfsdist = pkgs.bcc;
      apps.nfsslower = { type = "app"; program = "${pkgs.bcc}/bin/nfsslower"; };
      packages.nfsslower = pkgs.bcc;
      apps.nodegc = { type = "app"; program = "${pkgs.bcc}/bin/nodegc"; };
      packages.nodegc = pkgs.bcc;
      apps.nodestat = { type = "app"; program = "${pkgs.bcc}/bin/nodestat"; };
      packages.nodestat = pkgs.bcc;
      apps.offcputime = { type = "app"; program = "${pkgs.bcc}/bin/offcputime"; };
      packages.offcputime = pkgs.bcc;
      apps.offwaketime = { type = "app"; program = "${pkgs.bcc}/bin/offwaketime"; };
      packages.offwaketime = pkgs.bcc;
      apps.oomkill = { type = "app"; program = "${pkgs.bcc}/bin/oomkill"; };
      packages.oomkill = pkgs.bcc;
      apps.opensnoop = { type = "app"; program = "${pkgs.bcc}/bin/opensnoop"; };
      packages.opensnoop = pkgs.bcc;
      apps.perlcalls = { type = "app"; program = "${pkgs.bcc}/bin/perlcalls"; };
      packages.perlcalls = pkgs.bcc;
      apps.perlflow = { type = "app"; program = "${pkgs.bcc}/bin/perlflow"; };
      packages.perlflow = pkgs.bcc;
      apps.perlstat = { type = "app"; program = "${pkgs.bcc}/bin/perlstat"; };
      packages.perlstat = pkgs.bcc;
      apps.phpcalls = { type = "app"; program = "${pkgs.bcc}/bin/phpcalls"; };
      packages.phpcalls = pkgs.bcc;
      apps.phpflow = { type = "app"; program = "${pkgs.bcc}/bin/phpflow"; };
      packages.phpflow = pkgs.bcc;
      apps.phpstat = { type = "app"; program = "${pkgs.bcc}/bin/phpstat"; };
      packages.phpstat = pkgs.bcc;
      apps.pidpersec = { type = "app"; program = "${pkgs.bcc}/bin/pidpersec"; };
      packages.pidpersec = pkgs.bcc;
      apps.ppchcalls = { type = "app"; program = "${pkgs.bcc}/bin/ppchcalls"; };
      packages.ppchcalls = pkgs.bcc;
      apps.profile = { type = "app"; program = "${pkgs.bcc}/bin/profile"; };
      packages.profile = pkgs.bcc;
      apps.pythoncalls = { type = "app"; program = "${pkgs.bcc}/bin/pythoncalls"; };
      packages.pythoncalls = pkgs.bcc;
      apps.pythonflow = { type = "app"; program = "${pkgs.bcc}/bin/pythonflow"; };
      packages.pythonflow = pkgs.bcc;
      apps.pythongc = { type = "app"; program = "${pkgs.bcc}/bin/pythongc"; };
      packages.pythongc = pkgs.bcc;
      apps.pythonstat = { type = "app"; program = "${pkgs.bcc}/bin/pythonstat"; };
      packages.pythonstat = pkgs.bcc;
      apps.readahead = { type = "app"; program = "${pkgs.bcc}/bin/readahead"; };
      packages.readahead = pkgs.bcc;
      apps.reset-trace = { type = "app"; program = "${pkgs.bcc}/bin/reset-trace"; };
      packages.reset-trace = pkgs.bcc;
      apps.rubycalls = { type = "app"; program = "${pkgs.bcc}/bin/rubycalls"; };
      packages.rubycalls = pkgs.bcc;
      apps.rubyflow = { type = "app"; program = "${pkgs.bcc}/bin/rubyflow"; };
      packages.rubyflow = pkgs.bcc;
      apps.rubygc = { type = "app"; program = "${pkgs.bcc}/bin/rubygc"; };
      packages.rubygc = pkgs.bcc;
      apps.rubyobjnew = { type = "app"; program = "${pkgs.bcc}/bin/rubyobjnew"; };
      packages.rubyobjnew = pkgs.bcc;
      apps.rubystat = { type = "app"; program = "${pkgs.bcc}/bin/rubystat"; };
      packages.rubystat = pkgs.bcc;
      apps.runqlat = { type = "app"; program = "${pkgs.bcc}/bin/runqlat"; };
      packages.runqlat = pkgs.bcc;
      apps.runqlen = { type = "app"; program = "${pkgs.bcc}/bin/runqlen"; };
      packages.runqlen = pkgs.bcc;
      apps.runqslower = { type = "app"; program = "${pkgs.bcc}/bin/runqslower"; };
      packages.runqslower = pkgs.bcc;
      apps.shmsnoop = { type = "app"; program = "${pkgs.bcc}/bin/shmsnoop"; };
      packages.shmsnoop = pkgs.bcc;
      apps.slabratetop = { type = "app"; program = "${pkgs.bcc}/bin/slabratetop"; };
      packages.slabratetop = pkgs.bcc;
      apps.sofdsnoop = { type = "app"; program = "${pkgs.bcc}/bin/sofdsnoop"; };
      packages.sofdsnoop = pkgs.bcc;
      apps.softirqs = { type = "app"; program = "${pkgs.bcc}/bin/softirqs"; };
      packages.softirqs = pkgs.bcc;
      apps.solisten = { type = "app"; program = "${pkgs.bcc}/bin/solisten"; };
      packages.solisten = pkgs.bcc;
      apps.sslsniff = { type = "app"; program = "${pkgs.bcc}/bin/sslsniff"; };
      packages.sslsniff = pkgs.bcc;
      apps.stackcount = { type = "app"; program = "${pkgs.bcc}/bin/stackcount"; };
      packages.stackcount = pkgs.bcc;
      apps.statsnoop = { type = "app"; program = "${pkgs.bcc}/bin/statsnoop"; };
      packages.statsnoop = pkgs.bcc;
      apps.swapin = { type = "app"; program = "${pkgs.bcc}/bin/swapin"; };
      packages.swapin = pkgs.bcc;
      apps.syncsnoop = { type = "app"; program = "${pkgs.bcc}/bin/syncsnoop"; };
      packages.syncsnoop = pkgs.bcc;
      apps.syscount = { type = "app"; program = "${pkgs.bcc}/bin/syscount"; };
      packages.syscount = pkgs.bcc;
      apps.tclcalls = { type = "app"; program = "${pkgs.bcc}/bin/tclcalls"; };
      packages.tclcalls = pkgs.bcc;
      apps.tclflow = { type = "app"; program = "${pkgs.bcc}/bin/tclflow"; };
      packages.tclflow = pkgs.bcc;
      apps.tclobjnew = { type = "app"; program = "${pkgs.bcc}/bin/tclobjnew"; };
      packages.tclobjnew = pkgs.bcc;
      apps.tclstat = { type = "app"; program = "${pkgs.bcc}/bin/tclstat"; };
      packages.tclstat = pkgs.bcc;
      apps.tcpaccept = { type = "app"; program = "${pkgs.bcc}/bin/tcpaccept"; };
      packages.tcpaccept = pkgs.bcc;
      apps.tcpcong = { type = "app"; program = "${pkgs.bcc}/bin/tcpcong"; };
      packages.tcpcong = pkgs.bcc;
      apps.tcpconnect = { type = "app"; program = "${pkgs.bcc}/bin/tcpconnect"; };
      packages.tcpconnect = pkgs.bcc;
      apps.tcpconnlat = { type = "app"; program = "${pkgs.bcc}/bin/tcpconnlat"; };
      packages.tcpconnlat = pkgs.bcc;
      apps.tcpdrop = { type = "app"; program = "${pkgs.bcc}/bin/tcpdrop"; };
      packages.tcpdrop = pkgs.bcc;
      apps.tcplife = { type = "app"; program = "${pkgs.bcc}/bin/tcplife"; };
      packages.tcplife = pkgs.bcc;
      apps.tcpretrans = { type = "app"; program = "${pkgs.bcc}/bin/tcpretrans"; };
      packages.tcpretrans = pkgs.bcc;
      apps.tcprtt = { type = "app"; program = "${pkgs.bcc}/bin/tcprtt"; };
      packages.tcprtt = pkgs.bcc;
      apps.tcpstates = { type = "app"; program = "${pkgs.bcc}/bin/tcpstates"; };
      packages.tcpstates = pkgs.bcc;
      apps.tcpsubnet = { type = "app"; program = "${pkgs.bcc}/bin/tcpsubnet"; };
      packages.tcpsubnet = pkgs.bcc;
      apps.tcpsynbl = { type = "app"; program = "${pkgs.bcc}/bin/tcpsynbl"; };
      packages.tcpsynbl = pkgs.bcc;
      apps.tcptop = { type = "app"; program = "${pkgs.bcc}/bin/tcptop"; };
      packages.tcptop = pkgs.bcc;
      apps.tcptracer = { type = "app"; program = "${pkgs.bcc}/bin/tcptracer"; };
      packages.tcptracer = pkgs.bcc;
      apps.threadsnoop = { type = "app"; program = "${pkgs.bcc}/bin/threadsnoop"; };
      packages.threadsnoop = pkgs.bcc;
      apps.tplist = { type = "app"; program = "${pkgs.bcc}/bin/tplist"; };
      packages.tplist = pkgs.bcc;
      apps.trace = { type = "app"; program = "${pkgs.bcc}/bin/trace"; };
      packages.trace = pkgs.bcc;
      apps.ttysnoop = { type = "app"; program = "${pkgs.bcc}/bin/ttysnoop"; };
      packages.ttysnoop = pkgs.bcc;
      apps.ucalls = { type = "app"; program = "${pkgs.bcc}/bin/ucalls"; };
      packages.ucalls = pkgs.bcc;
      apps.uflow = { type = "app"; program = "${pkgs.bcc}/bin/uflow"; };
      packages.uflow = pkgs.bcc;
      apps.ugc = { type = "app"; program = "${pkgs.bcc}/bin/ugc"; };
      packages.ugc = pkgs.bcc;
      apps.uobjnew = { type = "app"; program = "${pkgs.bcc}/bin/uobjnew"; };
      packages.uobjnew = pkgs.bcc;
      apps.ustat = { type = "app"; program = "${pkgs.bcc}/bin/ustat"; };
      packages.ustat = pkgs.bcc;
      apps.uthreads = { type = "app"; program = "${pkgs.bcc}/bin/uthreads"; };
      packages.uthreads = pkgs.bcc;
      apps.vfscount = { type = "app"; program = "${pkgs.bcc}/bin/vfscount"; };
      packages.vfscount = pkgs.bcc;
      apps.vfsstat = { type = "app"; program = "${pkgs.bcc}/bin/vfsstat"; };
      packages.vfsstat = pkgs.bcc;
      apps.virtiostat = { type = "app"; program = "${pkgs.bcc}/bin/virtiostat"; };
      packages.virtiostat = pkgs.bcc;
      apps.wakeuptime = { type = "app"; program = "${pkgs.bcc}/bin/wakeuptime"; };
      packages.wakeuptime = pkgs.bcc;
      apps.xfsdist = { type = "app"; program = "${pkgs.bcc}/bin/xfsdist"; };
      packages.xfsdist = pkgs.bcc;
      apps.xfsslower = { type = "app"; program = "${pkgs.bcc}/bin/xfsslower"; };
      packages.xfsslower = pkgs.bcc;
      apps.zfsdist = { type = "app"; program = "${pkgs.bcc}/bin/zfsdist"; };
      packages.zfsdist = pkgs.bcc;
      apps.zfsslower = { type = "app"; program = "${pkgs.bcc}/bin/zfsslower"; };
      packages.zfsslower = pkgs.bcc;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.bcc = pkgs.bcc;
      apps.bchunk = { type = "app"; program = "${pkgs.bchunk}/bin/bchunk"; };
      packages.bchunk = pkgs.bchunk;
      apps.bindfs = { type = "app"; program = "${pkgs.bindfs}/bin/bindfs"; };
      packages.bindfs = pkgs.bindfs;
      apps."mount.fuse.bindfs" = { type = "app"; program = "${pkgs.bindfs}/bin/mount.fuse.bindfs"; };
      packages."mount.fuse.bindfs" = pkgs.bindfs;
      apps.bw = { type = "app"; program = "${pkgs.bitwarden-cli}/lib/node_modules/.bin/bw"; };
      packages.bw = pkgs.bitwarden-cli;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.bitwarden-cli = pkgs.bitwarden-cli;
      apps.black = { type = "app"; program = "${pkgs.black}/bin/black"; };
      packages.black = pkgs.black;
      apps.blackd = { type = "app"; program = "${pkgs.black}/bin/blackd"; };
      packages.blackd = pkgs.black;
      apps.borg = { type = "app"; program = "${pkgs.borgbackup}/bin/borg"; };
      packages.borg = pkgs.borgbackup;
      apps.borgfs = { type = "app"; program = "${pkgs.borgbackup}/bin/borgfs"; };
      packages.borgfs = pkgs.borgbackup;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.borgbackup = pkgs.borgbackup;
      apps.bsdiff = { type = "app"; program = "${pkgs.bsdiff}/bin/bsdiff"; };
      packages.bsdiff = pkgs.bsdiff;
      apps.bspatch = { type = "app"; program = "${pkgs.bsdiff}/bin/bspatch"; };
      packages.bspatch = pkgs.bsdiff;
      apps.btfs = { type = "app"; program = "${pkgs.btfs}/bin/btfs"; };
      packages.btfs = pkgs.btfs;
      apps.btfsstat = { type = "app"; program = "${pkgs.btfs}/bin/btfsstat"; };
      packages.btfsstat = pkgs.btfs;
      apps.btplay = { type = "app"; program = "${pkgs.btfs}/bin/btplay"; };
      packages.btplay = pkgs.btfs;
      apps.btop = { type = "app"; program = "${pkgs.btop}/bin/btop"; };
      packages.btop = pkgs.btop;
      apps.chars = { type = "app"; program = "${pkgs.chars}/bin/chars"; };
      packages.chars = pkgs.chars;
      apps.cicero = { type = "app"; program = "${pkgs.cicero-tui}/bin/cicero"; };
      packages.cicero = pkgs.cicero-tui;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.cicero-tui = pkgs.cicero-tui;
      apps.cntr = { type = "app"; program = "${pkgs.cntr}/bin/cntr"; };
      packages.cntr = pkgs.cntr;
      apps.csvs-to-sqlite = { type = "app"; program = "${pkgs.csvs-to-sqlite}/bin/csvs-to-sqlite"; };
      packages.csvs-to-sqlite = pkgs.csvs-to-sqlite;
      apps.czkawka_cli = { type = "app"; program = "${pkgs.czkawka}/bin/czkawka_cli"; };
      packages.czkawka_cli = pkgs.czkawka;
      apps.czkawka_gui = { type = "app"; program = "${pkgs.czkawka}/bin/czkawka_gui"; };
      packages.czkawka_gui = pkgs.czkawka;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.czkawka = pkgs.czkawka;
      apps.dar = { type = "app"; program = "${pkgs.dar}/bin/dar"; };
      packages.dar = pkgs.dar;
      apps.dar_cp = { type = "app"; program = "${pkgs.dar}/bin/dar_cp"; };
      packages.dar_cp = pkgs.dar;
      apps.dar_manager = { type = "app"; program = "${pkgs.dar}/bin/dar_manager"; };
      packages.dar_manager = pkgs.dar;
      apps.dar_slave = { type = "app"; program = "${pkgs.dar}/bin/dar_slave"; };
      packages.dar_slave = pkgs.dar;
      apps.dar_split = { type = "app"; program = "${pkgs.dar}/bin/dar_split"; };
      packages.dar_split = pkgs.dar;
      apps.dar_xform = { type = "app"; program = "${pkgs.dar}/bin/dar_xform"; };
      packages.dar_xform = pkgs.dar;
      apps.deno = { type = "app"; program = "${pkgs.deno}/bin/deno"; };
      packages.deno = pkgs.deno;
      apps.dialog = { type = "app"; program = "${pkgs.dialog}/bin/dialog"; };
      packages.dialog = pkgs.dialog;
      apps.delv = { type = "app"; program = "${pkgs.dig}/bin/delv"; };
      packages.delv = pkgs.dig;
      apps.dig = { type = "app"; program = "${pkgs.dig}/bin/dig"; };
      packages.dig = pkgs.dig;
      apps.nslookup = { type = "app"; program = "${pkgs.dig}/bin/nslookup"; };
      packages.nslookup = pkgs.dig;
      apps.nsupdate = { type = "app"; program = "${pkgs.dig}/bin/nsupdate"; };
      packages.nsupdate = pkgs.dig;
      apps.dive = { type = "app"; program = "${pkgs.dive}/bin/dive"; };
      packages.dive = pkgs.dive;
      apps.dmtxquery = { type = "app"; program = "${pkgs.dmtx-utils}/bin/dmtxquery"; };
      packages.dmtxquery = pkgs.dmtx-utils;
      apps.dmtxread = { type = "app"; program = "${pkgs.dmtx-utils}/bin/dmtxread"; };
      packages.dmtxread = pkgs.dmtx-utils;
      apps.dmtxwrite = { type = "app"; program = "${pkgs.dmtx-utils}/bin/dmtxwrite"; };
      packages.dmtxwrite = pkgs.dmtx-utils;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.dmtx-utils = pkgs.dmtx-utils;
      apps.docker-buildx = { type = "app"; program = "${pkgs.docker-buildx}/bin/docker-buildx"; };
      packages.docker-buildx = pkgs.docker-buildx;
      apps.docker = { type = "app"; program = "${pkgs.docker-client}/bin/docker"; };
      packages.docker = pkgs.docker-client;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.docker-client = pkgs.docker-client;
      apps.docker-compose = { type = "app"; program = "${pkgs.docker-compose}/bin/docker-compose"; };
      packages.docker-compose = pkgs.docker-compose;
      apps.fab = { type = "app"; program = "${pkgs.Fabric}/bin/fab"; };
      packages.fab = pkgs.Fabric;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.Fabric = pkgs.Fabric;
      apps.ffmpeg = { type = "app"; program = "${pkgs.ffmpeg-headless}/bin/ffmpeg"; };
      packages.ffmpeg = pkgs.ffmpeg-headless;
      apps.ffprobe = { type = "app"; program = "${pkgs.ffmpeg-headless}/bin/ffprobe"; };
      packages.ffprobe = pkgs.ffmpeg-headless;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.ffmpeg-headless = pkgs.ffmpeg-headless;
      apps.fossil = { type = "app"; program = "${pkgs.fossil}/bin/fossil"; };
      packages.fossil = pkgs.fossil;
      apps.fribidi = { type = "app"; program = "${pkgs.fribidi}/bin/fribidi"; };
      packages.fribidi = pkgs.fribidi;
      apps.gifdiff = { type = "app"; program = "${pkgs.gifsicle}/bin/gifdiff"; };
      packages.gifdiff = pkgs.gifsicle;
      apps.gifsicle = { type = "app"; program = "${pkgs.gifsicle}/bin/gifsicle"; };
      packages.gifsicle = pkgs.gifsicle;
      apps.git-filter-repo = { type = "app"; program = "${pkgs.git-filter-repo}/bin/git-filter-repo"; };
      packages.git-filter-repo = pkgs.git-filter-repo;
      apps.gitfs = { type = "app"; program = "${pkgs.gitfs}/bin/gitfs"; };
      packages.gitfs = pkgs.gitfs;
      apps.git-credential-libsecret = { type = "app"; program = "${pkgs.gitFull}/bin/git-credential-libsecret"; };
      packages.git-credential-libsecret = pkgs.gitFull;
      apps.git-credential-netrc = { type = "app"; program = "${pkgs.gitFull}/bin/git-credential-netrc"; };
      packages.git-credential-netrc = pkgs.gitFull;
      apps.git-cvsserver = { type = "app"; program = "${pkgs.gitFull}/bin/git-cvsserver"; };
      packages.git-cvsserver = pkgs.gitFull;
      apps.git-http-backend = { type = "app"; program = "${pkgs.gitFull}/bin/git-http-backend"; };
      packages.git-http-backend = pkgs.gitFull;
      apps.git-jump = { type = "app"; program = "${pkgs.gitFull}/bin/git-jump"; };
      packages.git-jump = pkgs.gitFull;
      apps.git-receive-pack = { type = "app"; program = "${pkgs.gitFull}/bin/git-receive-pack"; };
      packages.git-receive-pack = pkgs.gitFull;
      apps.git-shell = { type = "app"; program = "${pkgs.gitFull}/bin/git-shell"; };
      packages.git-shell = pkgs.gitFull;
      apps.git-upload-archive = { type = "app"; program = "${pkgs.gitFull}/bin/git-upload-archive"; };
      packages.git-upload-archive = pkgs.gitFull;
      apps.git-upload-pack = { type = "app"; program = "${pkgs.gitFull}/bin/git-upload-pack"; };
      packages.git-upload-pack = pkgs.gitFull;
      apps.gitk = { type = "app"; program = "${pkgs.gitFull}/bin/gitk"; };
      packages.gitk = pkgs.gitFull;
      apps.scalar = { type = "app"; program = "${pkgs.gitFull}/bin/scalar"; };
      packages.scalar = pkgs.gitFull;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.gitFull = pkgs.gitFull;
      apps.git-lfs = { type = "app"; program = "${pkgs.git-lfs}/bin/git-lfs"; };
      packages.git-lfs = pkgs.git-lfs;
      apps.gitui = { type = "app"; program = "${pkgs.gitui}/bin/gitui"; };
      packages.gitui = pkgs.gitui;
      apps.patch = { type = "app"; program = "${pkgs.gnupatch}/bin/patch"; };
      packages.patch = pkgs.gnupatch;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.gnupatch = pkgs.gnupatch;
      apps.acyclic = { type = "app"; program = "${pkgs.graphviz}/bin/acyclic"; };
      packages.acyclic = pkgs.graphviz;
      apps.bcomps = { type = "app"; program = "${pkgs.graphviz}/bin/bcomps"; };
      packages.bcomps = pkgs.graphviz;
      apps.ccomps = { type = "app"; program = "${pkgs.graphviz}/bin/ccomps"; };
      packages.ccomps = pkgs.graphviz;
      apps.circo = { type = "app"; program = "${pkgs.graphviz}/bin/circo"; };
      packages.circo = pkgs.graphviz;
      apps.cluster = { type = "app"; program = "${pkgs.graphviz}/bin/cluster"; };
      packages.cluster = pkgs.graphviz;
      apps.diffimg = { type = "app"; program = "${pkgs.graphviz}/bin/diffimg"; };
      packages.diffimg = pkgs.graphviz;
      apps.dijkstra = { type = "app"; program = "${pkgs.graphviz}/bin/dijkstra"; };
      packages.dijkstra = pkgs.graphviz;
      apps.dot = { type = "app"; program = "${pkgs.graphviz}/bin/dot"; };
      packages.dot = pkgs.graphviz;
      apps.dot2gxl = { type = "app"; program = "${pkgs.graphviz}/bin/dot2gxl"; };
      packages.dot2gxl = pkgs.graphviz;
      apps.dot_builtins = { type = "app"; program = "${pkgs.graphviz}/bin/dot_builtins"; };
      packages.dot_builtins = pkgs.graphviz;
      apps.edgepaint = { type = "app"; program = "${pkgs.graphviz}/bin/edgepaint"; };
      packages.edgepaint = pkgs.graphviz;
      apps.fdp = { type = "app"; program = "${pkgs.graphviz}/bin/fdp"; };
      packages.fdp = pkgs.graphviz;
      apps.gc = { type = "app"; program = "${pkgs.graphviz}/bin/gc"; };
      packages.gc = pkgs.graphviz;
      apps.gml2gv = { type = "app"; program = "${pkgs.graphviz}/bin/gml2gv"; };
      packages.gml2gv = pkgs.graphviz;
      apps.graphml2gv = { type = "app"; program = "${pkgs.graphviz}/bin/graphml2gv"; };
      packages.graphml2gv = pkgs.graphviz;
      apps.gv2gml = { type = "app"; program = "${pkgs.graphviz}/bin/gv2gml"; };
      packages.gv2gml = pkgs.graphviz;
      apps.gv2gxl = { type = "app"; program = "${pkgs.graphviz}/bin/gv2gxl"; };
      packages.gv2gxl = pkgs.graphviz;
      apps.gvcolor = { type = "app"; program = "${pkgs.graphviz}/bin/gvcolor"; };
      packages.gvcolor = pkgs.graphviz;
      apps.gvgen = { type = "app"; program = "${pkgs.graphviz}/bin/gvgen"; };
      packages.gvgen = pkgs.graphviz;
      apps.gvmap = { type = "app"; program = "${pkgs.graphviz}/bin/gvmap"; };
      packages.gvmap = pkgs.graphviz;
      apps."gvmap.sh" = { type = "app"; program = "${pkgs.graphviz}/bin/gvmap.sh"; };
      packages."gvmap.sh" = pkgs.graphviz;
      apps.gvpack = { type = "app"; program = "${pkgs.graphviz}/bin/gvpack"; };
      packages.gvpack = pkgs.graphviz;
      apps.gvpr = { type = "app"; program = "${pkgs.graphviz}/bin/gvpr"; };
      packages.gvpr = pkgs.graphviz;
      apps.gxl2dot = { type = "app"; program = "${pkgs.graphviz}/bin/gxl2dot"; };
      packages.gxl2dot = pkgs.graphviz;
      apps.gxl2gv = { type = "app"; program = "${pkgs.graphviz}/bin/gxl2gv"; };
      packages.gxl2gv = pkgs.graphviz;
      apps.mm2gv = { type = "app"; program = "${pkgs.graphviz}/bin/mm2gv"; };
      packages.mm2gv = pkgs.graphviz;
      apps.neato = { type = "app"; program = "${pkgs.graphviz}/bin/neato"; };
      packages.neato = pkgs.graphviz;
      apps.nop = { type = "app"; program = "${pkgs.graphviz}/bin/nop"; };
      packages.nop = pkgs.graphviz;
      apps.osage = { type = "app"; program = "${pkgs.graphviz}/bin/osage"; };
      packages.osage = pkgs.graphviz;
      apps.patchwork = { type = "app"; program = "${pkgs.graphviz}/bin/patchwork"; };
      packages.patchwork = pkgs.graphviz;
      apps.prune = { type = "app"; program = "${pkgs.graphviz}/bin/prune"; };
      packages.prune = pkgs.graphviz;
      apps.sccmap = { type = "app"; program = "${pkgs.graphviz}/bin/sccmap"; };
      packages.sccmap = pkgs.graphviz;
      apps.sfdp = { type = "app"; program = "${pkgs.graphviz}/bin/sfdp"; };
      packages.sfdp = pkgs.graphviz;
      apps.tred = { type = "app"; program = "${pkgs.graphviz}/bin/tred"; };
      packages.tred = pkgs.graphviz;
      apps.twopi = { type = "app"; program = "${pkgs.graphviz}/bin/twopi"; };
      packages.twopi = pkgs.graphviz;
      apps.unflatten = { type = "app"; program = "${pkgs.graphviz}/bin/unflatten"; };
      packages.unflatten = pkgs.graphviz;
      apps.vimdot = { type = "app"; program = "${pkgs.graphviz}/bin/vimdot"; };
      packages.vimdot = pkgs.graphviz;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.graphviz = pkgs.graphviz;
      apps.hivemind = { type = "app"; program = "${pkgs.hivemind}/bin/hivemind"; };
      packages.hivemind = pkgs.hivemind;
      apps.hocr-check = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-check"; };
      packages.hocr-check = pkgs.hocr-tools;
      apps.hocr-combine = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-combine"; };
      packages.hocr-combine = pkgs.hocr-tools;
      apps.hocr-cut = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-cut"; };
      packages.hocr-cut = pkgs.hocr-tools;
      apps.hocr-eval = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-eval"; };
      packages.hocr-eval = pkgs.hocr-tools;
      apps.hocr-eval-geom = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-eval-geom"; };
      packages.hocr-eval-geom = pkgs.hocr-tools;
      apps.hocr-eval-lines = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-eval-lines"; };
      packages.hocr-eval-lines = pkgs.hocr-tools;
      apps.hocr-extract-g1000 = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-extract-g1000"; };
      packages.hocr-extract-g1000 = pkgs.hocr-tools;
      apps.hocr-extract-images = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-extract-images"; };
      packages.hocr-extract-images = pkgs.hocr-tools;
      apps.hocr-lines = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-lines"; };
      packages.hocr-lines = pkgs.hocr-tools;
      apps.hocr-merge-dc = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-merge-dc"; };
      packages.hocr-merge-dc = pkgs.hocr-tools;
      apps.hocr-pdf = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-pdf"; };
      packages.hocr-pdf = pkgs.hocr-tools;
      apps.hocr-split = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-split"; };
      packages.hocr-split = pkgs.hocr-tools;
      apps.hocr-wordfreq = { type = "app"; program = "${pkgs.hocr-tools}/bin/hocr-wordfreq"; };
      packages.hocr-wordfreq = pkgs.hocr-tools;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.hocr-tools = pkgs.hocr-tools;
      apps.honcho = { type = "app"; program = "${pkgs.honcho}/bin/honcho"; };
      packages.honcho = pkgs.honcho;
      apps.htop = { type = "app"; program = "${pkgs.htop}/bin/htop"; };
      packages.htop = pkgs.htop;
      apps.check_hd = { type = "app"; program = "${pkgs.hwinfo}/bin/check_hd"; };
      packages.check_hd = pkgs.hwinfo;
      apps.convert_hd = { type = "app"; program = "${pkgs.hwinfo}/bin/convert_hd"; };
      packages.convert_hd = pkgs.hwinfo;
      apps.getsysinfo = { type = "app"; program = "${pkgs.hwinfo}/bin/getsysinfo"; };
      packages.getsysinfo = pkgs.hwinfo;
      apps.hwinfo = { type = "app"; program = "${pkgs.hwinfo}/bin/hwinfo"; };
      packages.hwinfo = pkgs.hwinfo;
      apps.mk_isdnhwdb = { type = "app"; program = "${pkgs.hwinfo}/bin/mk_isdnhwdb"; };
      packages.mk_isdnhwdb = pkgs.hwinfo;
      apps.hwloc-annotate = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-annotate"; };
      packages.hwloc-annotate = pkgs.hwloc;
      apps.hwloc-bind = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-bind"; };
      packages.hwloc-bind = pkgs.hwloc;
      apps.hwloc-calc = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-calc"; };
      packages.hwloc-calc = pkgs.hwloc;
      apps.hwloc-compress-dir = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-compress-dir"; };
      packages.hwloc-compress-dir = pkgs.hwloc;
      apps.hwloc-diff = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-diff"; };
      packages.hwloc-diff = pkgs.hwloc;
      apps.hwloc-distrib = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-distrib"; };
      packages.hwloc-distrib = pkgs.hwloc;
      apps.hwloc-dump-hwdata = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-dump-hwdata"; };
      packages.hwloc-dump-hwdata = pkgs.hwloc;
      apps.hwloc-gather-cpuid = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-gather-cpuid"; };
      packages.hwloc-gather-cpuid = pkgs.hwloc;
      apps.hwloc-gather-topology = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-gather-topology"; };
      packages.hwloc-gather-topology = pkgs.hwloc;
      apps.hwloc-info = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-info"; };
      packages.hwloc-info = pkgs.hwloc;
      apps.hwloc-ls = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-ls"; };
      packages.hwloc-ls = pkgs.hwloc;
      apps.hwloc-patch = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-patch"; };
      packages.hwloc-patch = pkgs.hwloc;
      apps.hwloc-ps = { type = "app"; program = "${pkgs.hwloc}/bin/hwloc-ps"; };
      packages.hwloc-ps = pkgs.hwloc;
      apps.lstopo-no-graphics = { type = "app"; program = "${pkgs.hwloc}/bin/lstopo-no-graphics"; };
      packages.lstopo-no-graphics = pkgs.hwloc;
      apps.netloc_draw_to_json = { type = "app"; program = "${pkgs.hwloc}/bin/netloc_draw_to_json"; };
      packages.netloc_draw_to_json = pkgs.hwloc;
      apps.netloc_ib_extract_dats = { type = "app"; program = "${pkgs.hwloc}/bin/netloc_ib_extract_dats"; };
      packages.netloc_ib_extract_dats = pkgs.hwloc;
      apps.netloc_ib_gather_raw = { type = "app"; program = "${pkgs.hwloc}/bin/netloc_ib_gather_raw"; };
      packages.netloc_ib_gather_raw = pkgs.hwloc;
      apps.lstopo = { type = "app"; program = "${pkgs.hwloc}/bin/lstopo"; };
      packages.lstopo = pkgs.hwloc;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.hwloc = pkgs.hwloc;
      apps.iotop = { type = "app"; program = "${pkgs.iotop}/bin/iotop"; };
      packages.iotop = pkgs.iotop;
      apps.compile_et = { type = "app"; program = "${pkgs.krb5}/bin/compile_et"; };
      packages.compile_et = pkgs.krb5;
      apps.gss-client = { type = "app"; program = "${pkgs.krb5}/bin/gss-client"; };
      packages.gss-client = pkgs.krb5;
      apps.gss-server = { type = "app"; program = "${pkgs.krb5}/bin/gss-server"; };
      packages.gss-server = pkgs.krb5;
      apps.kadmin = { type = "app"; program = "${pkgs.krb5}/bin/kadmin"; };
      packages.kadmin = pkgs.krb5;
      apps."kadmin.local" = { type = "app"; program = "${pkgs.krb5}/bin/kadmin.local"; };
      packages."kadmin.local" = pkgs.krb5;
      apps.kadmind = { type = "app"; program = "${pkgs.krb5}/bin/kadmind"; };
      packages.kadmind = pkgs.krb5;
      apps.kdb5_util = { type = "app"; program = "${pkgs.krb5}/bin/kdb5_util"; };
      packages.kdb5_util = pkgs.krb5;
      apps.kdestroy = { type = "app"; program = "${pkgs.krb5}/bin/kdestroy"; };
      packages.kdestroy = pkgs.krb5;
      apps.kinit = { type = "app"; program = "${pkgs.krb5}/bin/kinit"; };
      packages.kinit = pkgs.krb5;
      apps.klist = { type = "app"; program = "${pkgs.krb5}/bin/klist"; };
      packages.klist = pkgs.krb5;
      apps.kpasswd = { type = "app"; program = "${pkgs.krb5}/bin/kpasswd"; };
      packages.kpasswd = pkgs.krb5;
      apps.kprop = { type = "app"; program = "${pkgs.krb5}/bin/kprop"; };
      packages.kprop = pkgs.krb5;
      apps.kpropd = { type = "app"; program = "${pkgs.krb5}/bin/kpropd"; };
      packages.kpropd = pkgs.krb5;
      apps.kproplog = { type = "app"; program = "${pkgs.krb5}/bin/kproplog"; };
      packages.kproplog = pkgs.krb5;
      apps.krb5kdc = { type = "app"; program = "${pkgs.krb5}/bin/krb5kdc"; };
      packages.krb5kdc = pkgs.krb5;
      apps.ksu = { type = "app"; program = "${pkgs.krb5}/bin/ksu"; };
      packages.ksu = pkgs.krb5;
      apps.kswitch = { type = "app"; program = "${pkgs.krb5}/bin/kswitch"; };
      packages.kswitch = pkgs.krb5;
      apps.ktutil = { type = "app"; program = "${pkgs.krb5}/bin/ktutil"; };
      packages.ktutil = pkgs.krb5;
      apps.kvno = { type = "app"; program = "${pkgs.krb5}/bin/kvno"; };
      packages.kvno = pkgs.krb5;
      apps.sclient = { type = "app"; program = "${pkgs.krb5}/bin/sclient"; };
      packages.sclient = pkgs.krb5;
      apps.sim_client = { type = "app"; program = "${pkgs.krb5}/bin/sim_client"; };
      packages.sim_client = pkgs.krb5;
      apps.sim_server = { type = "app"; program = "${pkgs.krb5}/bin/sim_server"; };
      packages.sim_server = pkgs.krb5;
      apps.sserver = { type = "app"; program = "${pkgs.krb5}/bin/sserver"; };
      packages.sserver = pkgs.krb5;
      apps.uuclient = { type = "app"; program = "${pkgs.krb5}/bin/uuclient"; };
      packages.uuclient = pkgs.krb5;
      apps.uuserver = { type = "app"; program = "${pkgs.krb5}/bin/uuserver"; };
      packages.uuserver = pkgs.krb5;
      apps.k5srvutil = { type = "app"; program = "${pkgs.krb5}/bin/k5srvutil"; };
      packages.k5srvutil = pkgs.krb5;
      apps.krb5-send-pr = { type = "app"; program = "${pkgs.krb5}/bin/krb5-send-pr"; };
      packages.krb5-send-pr = pkgs.krb5;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.krb5 = pkgs.krb5;
      apps.kubectl = { type = "app"; program = "${pkgs.kubectl}/bin/kubectl"; };
      packages.kubectl = pkgs.kubectl;
      apps.convertfilestopdf = { type = "app"; program = "${pkgs.leptonica}/bin/convertfilestopdf"; };
      packages.convertfilestopdf = pkgs.leptonica;
      apps.convertfilestops = { type = "app"; program = "${pkgs.leptonica}/bin/convertfilestops"; };
      packages.convertfilestops = pkgs.leptonica;
      apps.convertformat = { type = "app"; program = "${pkgs.leptonica}/bin/convertformat"; };
      packages.convertformat = pkgs.leptonica;
      apps.convertsegfilestopdf = { type = "app"; program = "${pkgs.leptonica}/bin/convertsegfilestopdf"; };
      packages.convertsegfilestopdf = pkgs.leptonica;
      apps.convertsegfilestops = { type = "app"; program = "${pkgs.leptonica}/bin/convertsegfilestops"; };
      packages.convertsegfilestops = pkgs.leptonica;
      apps.converttopdf = { type = "app"; program = "${pkgs.leptonica}/bin/converttopdf"; };
      packages.converttopdf = pkgs.leptonica;
      apps.converttops = { type = "app"; program = "${pkgs.leptonica}/bin/converttops"; };
      packages.converttops = pkgs.leptonica;
      apps.fileinfo = { type = "app"; program = "${pkgs.leptonica}/bin/fileinfo"; };
      packages.fileinfo = pkgs.leptonica;
      apps.imagetops = { type = "app"; program = "${pkgs.leptonica}/bin/imagetops"; };
      packages.imagetops = pkgs.leptonica;
      apps.xtractprotos = { type = "app"; program = "${pkgs.leptonica}/bin/xtractprotos"; };
      packages.xtractprotos = pkgs.leptonica;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.leptonica = pkgs.leptonica;
      apps.bsdcat = { type = "app"; program = "${pkgs.libarchive}/bin/bsdcat"; };
      packages.bsdcat = pkgs.libarchive;
      apps.bsdcpio = { type = "app"; program = "${pkgs.libarchive}/bin/bsdcpio"; };
      packages.bsdcpio = pkgs.libarchive;
      apps.bsdtar = { type = "app"; program = "${pkgs.libarchive}/bin/bsdtar"; };
      packages.bsdtar = pkgs.libarchive;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.libarchive = pkgs.libarchive;
      apps.benchmark_xl = { type = "app"; program = "${pkgs.libjxl}/bin/benchmark_xl"; };
      packages.benchmark_xl = pkgs.libjxl;
      apps.cjpeg_hdr = { type = "app"; program = "${pkgs.libjxl}/bin/cjpeg_hdr"; };
      packages.cjpeg_hdr = pkgs.libjxl;
      apps.cjxl = { type = "app"; program = "${pkgs.libjxl}/bin/cjxl"; };
      packages.cjxl = pkgs.libjxl;
      apps.djxl = { type = "app"; program = "${pkgs.libjxl}/bin/djxl"; };
      packages.djxl = pkgs.libjxl;
      apps.jxlinfo = { type = "app"; program = "${pkgs.libjxl}/bin/jxlinfo"; };
      packages.jxlinfo = pkgs.libjxl;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.libjxl = pkgs.libjxl;
      apps.uchardet = { type = "app"; program = "${pkgs.libuchardet}/bin/uchardet"; };
      packages.uchardet = pkgs.libuchardet;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.libuchardet = pkgs.libuchardet;
      apps.cwebp = { type = "app"; program = "${pkgs.libwebp}/bin/cwebp"; };
      packages.cwebp = pkgs.libwebp;
      apps.dwebp = { type = "app"; program = "${pkgs.libwebp}/bin/dwebp"; };
      packages.dwebp = pkgs.libwebp;
      apps.gif2webp = { type = "app"; program = "${pkgs.libwebp}/bin/gif2webp"; };
      packages.gif2webp = pkgs.libwebp;
      apps.img2webp = { type = "app"; program = "${pkgs.libwebp}/bin/img2webp"; };
      packages.img2webp = pkgs.libwebp;
      apps.webpinfo = { type = "app"; program = "${pkgs.libwebp}/bin/webpinfo"; };
      packages.webpinfo = pkgs.libwebp;
      apps.webpmux = { type = "app"; program = "${pkgs.libwebp}/bin/webpmux"; };
      packages.webpmux = pkgs.libwebp;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.libwebp = pkgs.libwebp;
      apps.lnav = { type = "app"; program = "${pkgs.lnav}/bin/lnav"; };
      packages.lnav = pkgs.lnav;
      apps.lshw = { type = "app"; program = "${pkgs.lshw}/bin/lshw"; };
      packages.lshw = pkgs.lshw;
      apps.lurk = { type = "app"; program = "${pkgs.lurk}/bin/lurk"; };
      packages.lurk = pkgs.lurk;
      apps.maturin = { type = "app"; program = "${pkgs.maturin}/bin/maturin"; };
      packages.maturin = pkgs.maturin;
      apps.minify = { type = "app"; program = "${pkgs.minify}/bin/minify"; };
      packages.minify = pkgs.minify;
      apps.external-ip = { type = "app"; program = "${pkgs.miniupnpc}/bin/external-ip"; };
      packages.external-ip = pkgs.miniupnpc;
      apps.upnpc = { type = "app"; program = "${pkgs.miniupnpc}/bin/upnpc"; };
      packages.upnpc = pkgs.miniupnpc;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.miniupnpc = pkgs.miniupnpc;
      apps.mosh = { type = "app"; program = "${pkgs.mosh}/bin/mosh"; };
      packages.mosh = pkgs.mosh;
      apps.mosh-client = { type = "app"; program = "${pkgs.mosh}/bin/mosh-client"; };
      packages.mosh-client = pkgs.mosh;
      apps.mosh-server = { type = "app"; program = "${pkgs.mosh}/bin/mosh-server"; };
      packages.mosh-server = pkgs.mosh;
      apps.mpvpaper = { type = "app"; program = "${pkgs.mpvpaper}/bin/mpvpaper"; };
      packages.mpvpaper = pkgs.mpvpaper;
      apps.mpvpaper-holder = { type = "app"; program = "${pkgs.mpvpaper}/bin/mpvpaper-holder"; };
      packages.mpvpaper-holder = pkgs.mpvpaper;
      apps.ncdu = { type = "app"; program = "${pkgs.ncdu}/bin/ncdu"; };
      packages.ncdu = pkgs.ncdu;
      apps.nethogs = { type = "app"; program = "${pkgs.nethogs}/bin/nethogs"; };
      packages.nethogs = pkgs.nethogs;
      apps.nm-online = { type = "app"; program = "${pkgs.networkmanager}/bin/nm-online"; };
      packages.nm-online = pkgs.networkmanager;
      apps.nmcli = { type = "app"; program = "${pkgs.networkmanager}/bin/nmcli"; };
      packages.nmcli = pkgs.networkmanager;
      apps.nmtui = { type = "app"; program = "${pkgs.networkmanager}/bin/nmtui"; };
      packages.nmtui = pkgs.networkmanager;
      apps.nmtui-connect = { type = "app"; program = "${pkgs.networkmanager}/bin/nmtui-connect"; };
      packages.nmtui-connect = pkgs.networkmanager;
      apps.nmtui-edit = { type = "app"; program = "${pkgs.networkmanager}/bin/nmtui-edit"; };
      packages.nmtui-edit = pkgs.networkmanager;
      apps.nmtui-hostname = { type = "app"; program = "${pkgs.networkmanager}/bin/nmtui-hostname"; };
      packages.nmtui-hostname = pkgs.networkmanager;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.networkmanager = pkgs.networkmanager;
      apps.nix-bundle = { type = "app"; program = "${pkgs.nix-bundle}/bin/nix-bundle"; };
      packages.nix-bundle = pkgs.nix-bundle;
      apps.nix-run = { type = "app"; program = "${pkgs.nix-bundle}/bin/nix-run"; };
      packages.nix-run = pkgs.nix-bundle;
      apps.nix-channel-index = { type = "app"; program = "${pkgs.nix-index}/bin/nix-channel-index"; };
      packages.nix-channel-index = pkgs.nix-index;
      apps.nix-locate = { type = "app"; program = "${pkgs.nix-index}/bin/nix-locate"; };
      packages.nix-locate = pkgs.nix-index;
      apps.nix-index = { type = "app"; program = "${pkgs.nix-index}/bin/nix-index"; };
      packages.nix-index = pkgs.nix-index;
      apps.nix-build = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-build"; };
      packages.nix-build = pkgs.nixStatic;
      apps.nix-channel = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-channel"; };
      packages.nix-channel = pkgs.nixStatic;
      apps.nix-collect-garbage = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-collect-garbage"; };
      packages.nix-collect-garbage = pkgs.nixStatic;
      apps.nix-copy-closure = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-copy-closure"; };
      packages.nix-copy-closure = pkgs.nixStatic;
      apps.nix-daemon = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-daemon"; };
      packages.nix-daemon = pkgs.nixStatic;
      apps.nix-env = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-env"; };
      packages.nix-env = pkgs.nixStatic;
      apps.nix-hash = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-hash"; };
      packages.nix-hash = pkgs.nixStatic;
      apps.nix-instantiate = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-instantiate"; };
      packages.nix-instantiate = pkgs.nixStatic;
      apps.nix-prefetch-url = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-prefetch-url"; };
      packages.nix-prefetch-url = pkgs.nixStatic;
      apps.nix-shell = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-shell"; };
      packages.nix-shell = pkgs.nixStatic;
      apps.nix-store = { type = "app"; program = "${pkgs.nixStatic}/bin/nix-store"; };
      packages.nix-store = pkgs.nixStatic;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.nixStatic = pkgs.nixStatic;
      apps.nix-tree = { type = "app"; program = "${pkgs.nix-tree}/bin/nix-tree"; };
      packages.nix-tree = pkgs.nix-tree;
      apps.eslint = { type = "app"; program = "${pkgs.nodePackages.eslint}/lib/node_modules/.bin/eslint"; };
      packages.eslint = pkgs.nodePackages.eslint;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.nodePackages.eslint = pkgs.nodePackages.eslint;
      apps.prettier = { type = "app"; program = "${pkgs.nodePackages.prettier}/lib/node_modules/.bin/prettier"; };
      packages.prettier = pkgs.nodePackages.prettier;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.nodePackages.prettier = pkgs.nodePackages.prettier;
      apps.oathtool = { type = "app"; program = "${pkgs.oath-toolkit}/bin/oathtool"; };
      packages.oathtool = pkgs.oath-toolkit;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.oath-toolkit = pkgs.oath-toolkit;
      apps.ldapcompare = { type = "app"; program = "${pkgs.openldap}/bin/ldapcompare"; };
      packages.ldapcompare = pkgs.openldap;
      apps.ldapdelete = { type = "app"; program = "${pkgs.openldap}/bin/ldapdelete"; };
      packages.ldapdelete = pkgs.openldap;
      apps.ldapexop = { type = "app"; program = "${pkgs.openldap}/bin/ldapexop"; };
      packages.ldapexop = pkgs.openldap;
      apps.ldapmodify = { type = "app"; program = "${pkgs.openldap}/bin/ldapmodify"; };
      packages.ldapmodify = pkgs.openldap;
      apps.ldapmodrdn = { type = "app"; program = "${pkgs.openldap}/bin/ldapmodrdn"; };
      packages.ldapmodrdn = pkgs.openldap;
      apps.ldappasswd = { type = "app"; program = "${pkgs.openldap}/bin/ldappasswd"; };
      packages.ldappasswd = pkgs.openldap;
      apps.ldapsearch = { type = "app"; program = "${pkgs.openldap}/bin/ldapsearch"; };
      packages.ldapsearch = pkgs.openldap;
      apps.ldapurl = { type = "app"; program = "${pkgs.openldap}/bin/ldapurl"; };
      packages.ldapurl = pkgs.openldap;
      apps.ldapvc = { type = "app"; program = "${pkgs.openldap}/bin/ldapvc"; };
      packages.ldapvc = pkgs.openldap;
      apps.ldapwhoami = { type = "app"; program = "${pkgs.openldap}/bin/ldapwhoami"; };
      packages.ldapwhoami = pkgs.openldap;
      apps.ldapadd = { type = "app"; program = "${pkgs.openldap}/bin/ldapadd"; };
      packages.ldapadd = pkgs.openldap;
      apps.slapacl = { type = "app"; program = "${pkgs.openldap}/bin/slapacl"; };
      packages.slapacl = pkgs.openldap;
      apps.slapadd = { type = "app"; program = "${pkgs.openldap}/bin/slapadd"; };
      packages.slapadd = pkgs.openldap;
      apps.slapauth = { type = "app"; program = "${pkgs.openldap}/bin/slapauth"; };
      packages.slapauth = pkgs.openldap;
      apps.slapcat = { type = "app"; program = "${pkgs.openldap}/bin/slapcat"; };
      packages.slapcat = pkgs.openldap;
      apps.slapdn = { type = "app"; program = "${pkgs.openldap}/bin/slapdn"; };
      packages.slapdn = pkgs.openldap;
      apps.slapindex = { type = "app"; program = "${pkgs.openldap}/bin/slapindex"; };
      packages.slapindex = pkgs.openldap;
      apps.slapmodify = { type = "app"; program = "${pkgs.openldap}/bin/slapmodify"; };
      packages.slapmodify = pkgs.openldap;
      apps.slappasswd = { type = "app"; program = "${pkgs.openldap}/bin/slappasswd"; };
      packages.slappasswd = pkgs.openldap;
      apps.slapschema = { type = "app"; program = "${pkgs.openldap}/bin/slapschema"; };
      packages.slapschema = pkgs.openldap;
      apps.slaptest = { type = "app"; program = "${pkgs.openldap}/bin/slaptest"; };
      packages.slaptest = pkgs.openldap;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.openldap = pkgs.openldap;
      apps.c_rehash = { type = "app"; program = "${pkgs.openssl}/bin/c_rehash"; };
      packages.c_rehash = pkgs.openssl;
      apps.openssl = { type = "app"; program = "${pkgs.openssl}/bin/openssl"; };
      packages.openssl = pkgs.openssl;
      apps.overmind = { type = "app"; program = "${pkgs.overmind}/bin/overmind"; };
      packages.overmind = pkgs.overmind;
      apps.par2 = { type = "app"; program = "${pkgs.par2cmdline}/bin/par2"; };
      packages.par2 = pkgs.par2cmdline;
      apps.par2create = { type = "app"; program = "${pkgs.par2cmdline}/bin/par2create"; };
      packages.par2create = pkgs.par2cmdline;
      apps.par2repair = { type = "app"; program = "${pkgs.par2cmdline}/bin/par2repair"; };
      packages.par2repair = pkgs.par2cmdline;
      apps.par2verify = { type = "app"; program = "${pkgs.par2cmdline}/bin/par2verify"; };
      packages.par2verify = pkgs.par2cmdline;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.par2cmdline = pkgs.par2cmdline;
      apps.env_parallel = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel"; };
      packages.env_parallel = pkgs.parallel;
      apps."env_parallel.ash" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.ash"; };
      packages."env_parallel.ash" = pkgs.parallel;
      apps."env_parallel.bash" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.bash"; };
      packages."env_parallel.bash" = pkgs.parallel;
      apps."env_parallel.csh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.csh"; };
      packages."env_parallel.csh" = pkgs.parallel;
      apps."env_parallel.dash" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.dash"; };
      packages."env_parallel.dash" = pkgs.parallel;
      apps."env_parallel.fish" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.fish"; };
      packages."env_parallel.fish" = pkgs.parallel;
      apps."env_parallel.ksh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.ksh"; };
      packages."env_parallel.ksh" = pkgs.parallel;
      apps."env_parallel.mksh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.mksh"; };
      packages."env_parallel.mksh" = pkgs.parallel;
      apps."env_parallel.pdksh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.pdksh"; };
      packages."env_parallel.pdksh" = pkgs.parallel;
      apps."env_parallel.sh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.sh"; };
      packages."env_parallel.sh" = pkgs.parallel;
      apps."env_parallel.tcsh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.tcsh"; };
      packages."env_parallel.tcsh" = pkgs.parallel;
      apps."env_parallel.zsh" = { type = "app"; program = "${pkgs.parallel}/bin/env_parallel.zsh"; };
      packages."env_parallel.zsh" = pkgs.parallel;
      apps.niceload = { type = "app"; program = "${pkgs.parallel}/bin/niceload"; };
      packages.niceload = pkgs.parallel;
      apps.parallel = { type = "app"; program = "${pkgs.parallel}/bin/parallel"; };
      packages.parallel = pkgs.parallel;
      apps.parcat = { type = "app"; program = "${pkgs.parallel}/bin/parcat"; };
      packages.parcat = pkgs.parallel;
      apps.parset = { type = "app"; program = "${pkgs.parallel}/bin/parset"; };
      packages.parset = pkgs.parallel;
      apps.parsort = { type = "app"; program = "${pkgs.parallel}/bin/parsort"; };
      packages.parsort = pkgs.parallel;
      apps.sem = { type = "app"; program = "${pkgs.parallel}/bin/sem"; };
      packages.sem = pkgs.parallel;
      apps.sql = { type = "app"; program = "${pkgs.parallel}/bin/sql"; };
      packages.sql = pkgs.parallel;
      apps.pdfgrep = { type = "app"; program = "${pkgs.pdfgrep}/bin/pdfgrep"; };
      packages.pdfgrep = pkgs.pdfgrep;
      apps.pikchr = { type = "app"; program = "${pkgs.pikchr}/bin/pikchr"; };
      packages.pikchr = pkgs.pikchr;
      apps.pipectl = { type = "app"; program = "${pkgs.pipectl}/bin/pipectl"; };
      packages.pipectl = pkgs.pipectl;
      apps.pipx = { type = "app"; program = "${pkgs.pipx}/bin/pipx"; };
      packages.pipx = pkgs.pipx;
      apps.playerctl = { type = "app"; program = "${pkgs.playerctl}/bin/playerctl"; };
      packages.playerctl = pkgs.playerctl;
      apps.playerctld = { type = "app"; program = "${pkgs.playerctl}/bin/playerctld"; };
      packages.playerctld = pkgs.playerctl;
      apps.pdfattach = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfattach"; };
      packages.pdfattach = pkgs.poppler_utils;
      apps.pdfdetach = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfdetach"; };
      packages.pdfdetach = pkgs.poppler_utils;
      apps.pdffonts = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdffonts"; };
      packages.pdffonts = pkgs.poppler_utils;
      apps.pdfimages = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfimages"; };
      packages.pdfimages = pkgs.poppler_utils;
      apps.pdfinfo = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfinfo"; };
      packages.pdfinfo = pkgs.poppler_utils;
      apps.pdfseparate = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfseparate"; };
      packages.pdfseparate = pkgs.poppler_utils;
      apps.pdfsig = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfsig"; };
      packages.pdfsig = pkgs.poppler_utils;
      apps.pdftocairo = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdftocairo"; };
      packages.pdftocairo = pkgs.poppler_utils;
      apps.pdftohtml = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdftohtml"; };
      packages.pdftohtml = pkgs.poppler_utils;
      apps.pdftoppm = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdftoppm"; };
      packages.pdftoppm = pkgs.poppler_utils;
      apps.pdftops = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdftops"; };
      packages.pdftops = pkgs.poppler_utils;
      apps.pdftotext = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdftotext"; };
      packages.pdftotext = pkgs.poppler_utils;
      apps.pdfunite = { type = "app"; program = "${pkgs.poppler_utils}/bin/pdfunite"; };
      packages.pdfunite = pkgs.poppler_utils;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.poppler_utils = pkgs.poppler_utils;
      apps.procodile = { type = "app"; program = "${pkgs.procodile}/bin/procodile"; };
      packages.procodile = pkgs.procodile;
      apps.progress = { type = "app"; program = "${pkgs.progress}/bin/progress"; };
      packages.progress = pkgs.progress;
      apps.pv = { type = "app"; program = "${pkgs.pv}/bin/pv"; };
      packages.pv = pkgs.pv;
      apps.chardetect = { type = "app"; program = "${pkgs.python311Packages.chardet}/bin/chardetect"; };
      packages.chardetect = pkgs.python311Packages.chardet;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.python311Packages.chardet = pkgs.python311Packages.chardet;
      apps.ftfy = { type = "app"; program = "${pkgs.python311Packages.ftfy}/bin/ftfy"; };
      packages.ftfy = pkgs.python311Packages.ftfy;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.python311Packages.ftfy = pkgs.python311Packages.ftfy;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.python311Packages.paramiko = pkgs.python311Packages.paramiko;
      apps.pyupgrade = { type = "app"; program = "${pkgs.python311Packages.pyupgrade}/bin/pyupgrade"; };
      packages.pyupgrade = pkgs.python311Packages.pyupgrade;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.python311Packages.pyupgrade = pkgs.python311Packages.pyupgrade;
      apps.xattr = { type = "app"; program = "${pkgs.python311Packages.xattr}/bin/xattr"; };
      packages.xattr = pkgs.python311Packages.xattr;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.python311Packages.xattr = pkgs.python311Packages.xattr;
      apps.rancher = { type = "app"; program = "${pkgs.rancher}/bin/rancher"; };
      packages.rancher = pkgs.rancher;
      apps.rclone = { type = "app"; program = "${pkgs.rclone}/bin/rclone"; };
      packages.rclone = pkgs.rclone;
      apps.rfc = { type = "app"; program = "${pkgs.rfc}/bin/rfc"; };
      packages.rfc = pkgs.rfc;
      apps.roc-conv = { type = "app"; program = "${pkgs.roc-toolkit}/bin/roc-conv"; };
      packages.roc-conv = pkgs.roc-toolkit;
      apps.roc-recv = { type = "app"; program = "${pkgs.roc-toolkit}/bin/roc-recv"; };
      packages.roc-recv = pkgs.roc-toolkit;
      apps.roc-send = { type = "app"; program = "${pkgs.roc-toolkit}/bin/roc-send"; };
      packages.roc-send = pkgs.roc-toolkit;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.roc-toolkit = pkgs.roc-toolkit;
      apps.ruff = { type = "app"; program = "${pkgs.ruff}/bin/ruff"; };
      packages.ruff = pkgs.ruff;
      apps.chpst = { type = "app"; program = "${pkgs.runit}/bin/chpst"; };
      packages.chpst = pkgs.runit;
      apps.runit = { type = "app"; program = "${pkgs.runit}/bin/runit"; };
      packages.runit = pkgs.runit;
      apps.runit-init = { type = "app"; program = "${pkgs.runit}/bin/runit-init"; };
      packages.runit-init = pkgs.runit;
      apps.runsv = { type = "app"; program = "${pkgs.runit}/bin/runsv"; };
      packages.runsv = pkgs.runit;
      apps.runsvchdir = { type = "app"; program = "${pkgs.runit}/bin/runsvchdir"; };
      packages.runsvchdir = pkgs.runit;
      apps.runsvdir = { type = "app"; program = "${pkgs.runit}/bin/runsvdir"; };
      packages.runsvdir = pkgs.runit;
      apps.sv = { type = "app"; program = "${pkgs.runit}/bin/sv"; };
      packages.sv = pkgs.runit;
      apps.svlogd = { type = "app"; program = "${pkgs.runit}/bin/svlogd"; };
      packages.svlogd = pkgs.runit;
      apps.utmpset = { type = "app"; program = "${pkgs.runit}/bin/utmpset"; };
      packages.utmpset = pkgs.runit;
      apps.shellcheck = { type = "app"; program = "${pkgs.shellcheck}/bin/shellcheck"; };
      packages.shellcheck = pkgs.shellcheck;
      apps.shellharden = { type = "app"; program = "${pkgs.shellharden}/bin/shellharden"; };
      packages.shellharden = pkgs.shellharden;
      apps.shfmt = { type = "app"; program = "${pkgs.shfmt}/bin/shfmt"; };
      packages.shfmt = pkgs.shfmt;
      apps.sqlar = { type = "app"; program = "${pkgs.sqlar}/bin/sqlar"; };
      packages.sqlar = pkgs.sqlar;
      apps.sqlarfs = { type = "app"; program = "${pkgs.sqlar}/bin/sqlarfs"; };
      packages.sqlarfs = pkgs.sqlar;
      apps.sqldiff = { type = "app"; program = "${pkgs.sqldiff}/bin/sqldiff"; };
      packages.sqldiff = pkgs.sqldiff;
      apps.sqlite3_analyzer = { type = "app"; program = "${pkgs.sqlite-analyzer}/bin/sqlite3_analyzer"; };
      packages.sqlite3_analyzer = pkgs.sqlite-analyzer;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.sqlite-analyzer = pkgs.sqlite-analyzer;
      apps.sqlite3 = { type = "app"; program = "${pkgs.sqlite-interactive}/bin/sqlite3"; };
      packages.sqlite3 = pkgs.sqlite-interactive;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.sqlite-interactive = pkgs.sqlite-interactive;
      apps.sqlite-utils = { type = "app"; program = "${pkgs.sqlite-utils}/bin/sqlite-utils"; };
      packages.sqlite-utils = pkgs.sqlite-utils;
      apps.squashfuse = { type = "app"; program = "${pkgs.squashfuse}/bin/squashfuse"; };
      packages.squashfuse = pkgs.squashfuse;
      apps.squashfuse_ll = { type = "app"; program = "${pkgs.squashfuse}/bin/squashfuse_ll"; };
      packages.squashfuse_ll = pkgs.squashfuse;
      apps.strace = { type = "app"; program = "${pkgs.strace}/bin/strace"; };
      packages.strace = pkgs.strace;
      apps.strace-log-merge = { type = "app"; program = "${pkgs.strace}/bin/strace-log-merge"; };
      packages.strace-log-merge = pkgs.strace;
      apps.syncthing = { type = "app"; program = "${pkgs.syncthing}/bin/syncthing"; };
      packages.syncthing = pkgs.syncthing;
      apps.cifsiostat = { type = "app"; program = "${pkgs.sysstat}/bin/cifsiostat"; };
      packages.cifsiostat = pkgs.sysstat;
      apps.iostat = { type = "app"; program = "${pkgs.sysstat}/bin/iostat"; };
      packages.iostat = pkgs.sysstat;
      apps.mpstat = { type = "app"; program = "${pkgs.sysstat}/bin/mpstat"; };
      packages.mpstat = pkgs.sysstat;
      apps.pidstat = { type = "app"; program = "${pkgs.sysstat}/bin/pidstat"; };
      packages.pidstat = pkgs.sysstat;
      apps.sadf = { type = "app"; program = "${pkgs.sysstat}/bin/sadf"; };
      packages.sadf = pkgs.sysstat;
      apps.sar = { type = "app"; program = "${pkgs.sysstat}/bin/sar"; };
      packages.sar = pkgs.sysstat;
      apps.tapestat = { type = "app"; program = "${pkgs.sysstat}/bin/tapestat"; };
      packages.tapestat = pkgs.sysstat;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.sysstat = pkgs.sysstat;
      apps.tesseract = { type = "app"; program = "${pkgs.tesseract}/bin/tesseract"; };
      packages.tesseract = pkgs.tesseract;
      apps.ptiptop = { type = "app"; program = "${pkgs.tiptop}/bin/ptiptop"; };
      packages.ptiptop = pkgs.tiptop;
      apps.tiptop = { type = "app"; program = "${pkgs.tiptop}/bin/tiptop"; };
      packages.tiptop = pkgs.tiptop;
      apps.tmux = { type = "app"; program = "${pkgs.tmux}/bin/tmux"; };
      packages.tmux = pkgs.tmux;
      apps.transmission-cli = { type = "app"; program = "${pkgs.transmission}/bin/transmission-cli"; };
      packages.transmission-cli = pkgs.transmission;
      apps.transmission-create = { type = "app"; program = "${pkgs.transmission}/bin/transmission-create"; };
      packages.transmission-create = pkgs.transmission;
      apps.transmission-daemon = { type = "app"; program = "${pkgs.transmission}/bin/transmission-daemon"; };
      packages.transmission-daemon = pkgs.transmission;
      apps.transmission-edit = { type = "app"; program = "${pkgs.transmission}/bin/transmission-edit"; };
      packages.transmission-edit = pkgs.transmission;
      apps.transmission-remote = { type = "app"; program = "${pkgs.transmission}/bin/transmission-remote"; };
      packages.transmission-remote = pkgs.transmission;
      apps.transmission-show = { type = "app"; program = "${pkgs.transmission}/bin/transmission-show"; };
      packages.transmission-show = pkgs.transmission;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.transmission = pkgs.transmission;
      apps.uni = { type = "app"; program = "${pkgs.uni}/bin/uni"; };
      packages.uni = pkgs.uni;
      apps.unpaper = { type = "app"; program = "${pkgs.unpaper}/bin/unpaper"; };
      packages.unpaper = pkgs.unpaper;
      apps.usbtop = { type = "app"; program = "${pkgs.usbtop}/bin/usbtop"; };
      packages.usbtop = pkgs.usbtop;
      apps.vips = { type = "app"; program = "${pkgs.vips}/bin/vips"; };
      packages.vips = pkgs.vips;
      apps.vipsedit = { type = "app"; program = "${pkgs.vips}/bin/vipsedit"; };
      packages.vipsedit = pkgs.vips;
      apps.vipsheader = { type = "app"; program = "${pkgs.vips}/bin/vipsheader"; };
      packages.vipsheader = pkgs.vips;
      apps.vipsprofile = { type = "app"; program = "${pkgs.vips}/bin/vipsprofile"; };
      packages.vipsprofile = pkgs.vips;
      apps.vipsthumbnail = { type = "app"; program = "${pkgs.vips}/bin/vipsthumbnail"; };
      packages.vipsthumbnail = pkgs.vips;
      apps.wayland-info = { type = "app"; program = "${pkgs.wayland-utils}/bin/wayland-info"; };
      packages.wayland-info = pkgs.wayland-utils;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.wayland-utils = pkgs.wayland-utils;
      apps.waypipe = { type = "app"; program = "${pkgs.waypipe}/bin/waypipe"; };
      packages.waypipe = pkgs.waypipe;
      apps.wayvnc = { type = "app"; program = "${pkgs.wayvnc}/bin/wayvnc"; };
      packages.wayvnc = pkgs.wayvnc;
      apps.wayvncctl = { type = "app"; program = "${pkgs.wayvnc}/bin/wayvncctl"; };
      packages.wayvncctl = pkgs.wayvnc;
      apps.wdomirror = { type = "app"; program = "${pkgs.wdomirror}/bin/wdomirror"; };
      packages.wdomirror = pkgs.wdomirror;
      apps.wev = { type = "app"; program = "${pkgs.wev}/bin/wev"; };
      packages.wev = pkgs.wev;
      apps.wl-copy = { type = "app"; program = "${pkgs.wl-clipboard}/bin/wl-copy"; };
      packages.wl-copy = pkgs.wl-clipboard;
      apps.wl-paste = { type = "app"; program = "${pkgs.wl-clipboard}/bin/wl-paste"; };
      packages.wl-paste = pkgs.wl-clipboard;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.wl-clipboard = pkgs.wl-clipboard;
      apps.wl-mirror = { type = "app"; program = "${pkgs.wl-mirror}/bin/wl-mirror"; };
      packages.wl-mirror = pkgs.wl-mirror;
      apps.wl-present = { type = "app"; program = "${pkgs.wl-mirror}/bin/wl-present"; };
      packages.wl-present = pkgs.wl-mirror;
      apps.wlrctl = { type = "app"; program = "${pkgs.wlrctl}/bin/wlrctl"; };
      packages.wlrctl = pkgs.wlrctl;
      # package doesn't contain binaries, or binary name doesn't match package name
      packages.wlroots = pkgs.wlroots;
      apps.wmctrl = { type = "app"; program = "${pkgs.wmctrl}/bin/wmctrl"; };
      packages.wmctrl = pkgs.wmctrl;
      apps.wtype = { type = "app"; program = "${pkgs.wtype}/bin/wtype"; };
      packages.wtype = pkgs.wtype;
      apps.koi8rxterm = { type = "app"; program = "${pkgs.xterm}/bin/koi8rxterm"; };
      packages.koi8rxterm = pkgs.xterm;
      apps.resize = { type = "app"; program = "${pkgs.xterm}/bin/resize"; };
      packages.resize = pkgs.xterm;
      apps.uxterm = { type = "app"; program = "${pkgs.xterm}/bin/uxterm"; };
      packages.uxterm = pkgs.xterm;
      apps.xterm = { type = "app"; program = "${pkgs.xterm}/bin/xterm"; };
      packages.xterm = pkgs.xterm;
      apps.zathura = { type = "app"; program = "${pkgs.zathura}/bin/zathura"; };
      packages.zathura = pkgs.zathura;
      apps.pzstd = { type = "app"; program = "${pkgs.zstd}/bin/pzstd"; };
      packages.pzstd = pkgs.zstd;
      apps.unzstd = { type = "app"; program = "${pkgs.zstd}/bin/unzstd"; };
      packages.unzstd = pkgs.zstd;
      apps.zstd = { type = "app"; program = "${pkgs.zstd}/bin/zstd"; };
      packages.zstd = pkgs.zstd;
      apps.zstdgrep = { type = "app"; program = "${pkgs.zstd}/bin/zstdgrep"; };
      packages.zstdgrep = pkgs.zstd;
      apps.zstdless = { type = "app"; program = "${pkgs.zstd}/bin/zstdless"; };
      packages.zstdless = pkgs.zstd;
      apps.zstdcat = { type = "app"; program = "${pkgs.zstd}/bin/zstdcat"; };
      packages.zstdcat = pkgs.zstd;
      apps.zstdmt = { type = "app"; program = "${pkgs.zstd}/bin/zstdmt"; };
      packages.zstdmt = pkgs.zstd;

      # special case for az
      apps.az = { type = "app"; program = "${pkgs.azure-cli}/bin/az"; };
      packages.az = pkgs.azure-cli;

      # special case for git-gui, from /libexec/git-core/git-gui
      apps.git-gui = { type = "app"; program = "${pkgs.gitFull}/libexec/git-core/git-gui"; };
      packages.git-gui = pkgs.gitFull;
    });
}
